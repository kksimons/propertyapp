// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// prisma docs for CRUD: https://www.prisma.io/docs/orm/prisma-client/queries/crud

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String     @id @default(uuid())
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Property     Property[]
}

model Property {
  id          String   @id @default(uuid())
  name        String
  tagline     String
  category    String
  image       String
  country     String
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String
}

// model TestProfile {
//   id   String @id @default(uuid())
//   name String
// }

// -------------------------

// Create Single Record
// const task = await prisma.task.create({
//   data: {
//     content: 'some task',
//   },
// });

// Get All Records
// const tasks = await prisma.task.findMany();
// Get record by ID or unique identifier
// // By unique identifier
// const user = await prisma.user.findUnique({
//   where: {
//     email: 'elsa@prisma.io',
//   },
// });

// // By ID
// const task = await prisma.task.findUnique({
//   where: {
//     id: id,
//   },
// });
// Update Record
// const updateTask = await prisma.task.update({
//   where: {
//     id: id,
//   },
//   data: {
//     content: 'updated task',
//   },
// });

// Update or create records
// const upsertTask = await prisma.task.upsert({
//   where: {
//     id: id,
//   },
//   update: {
//     content: 'some value',
//   },
//   create: {
//     content: 'some value',
//   },
// });

// Delete a single record
// const deleteTask = await prisma.task.delete({
//   where: {
//     id: id,
//   },
// });
//
// -------------------------
